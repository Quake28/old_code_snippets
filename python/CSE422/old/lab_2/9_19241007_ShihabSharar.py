# -*- coding: utf-8 -*-
"""Genetic_Algorithm_Skeleton_Code_Student.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S1iEGF4FooL0NM-vseVOozTBnlQgRG47

## CSE422 lab: Genetic Algorithm

#### Genetic Algorithm Pseudo code:

**function** GENETIC-ALGORITHM( population, FITNESS-FN) **returns** an individual 
 
> **inputs:** population- a set of individuals/chromosomes; FITNESS-FN- a function that measures the fitness of an individual

>**repeat** 
new_population $\leftarrow$ empty set 
>>**for** $i=1$ **to** size ($ population$) **do**
$$
\begin{array}{l}
x \leftarrow \text { RANDOM-SELECTION }(\text { population, FITNESS-FN }) \\
y \leftarrow \text { RANDOM-SELECTION }(\text { population, FITNESS-FN }) \\
child  \leftarrow \operatorname{CROSSOVER}(x, y)
\end{array}
$$
>>>**if** (some_random_number < mutation_threshold) **then** child$\leftarrow$ MUTATE ( child ) 

>>>add child to new_population 

>>population $\leftarrow$ new_population 

>**until** some individual is fit enough, or enough time has elapsed

>**return** the best individual in population, according to FITNESS-FN

### Skeleton Code:

### Importing libraries
"""

import numpy as np
import math

from numpy.random.mtrand import random_integers

"""### Fitness function"""

def fitness(population, values):

    '''calculates the fitness score of each
        of the individuals in the population
        
        returns a 1D numpy array: index referring to 
        ith individual in population, and value referring 
        to the fitness score.'''
    fitness_result = []
    fitness_summation = []
    values=np.array(values)
    for chromosome in population:
        x=chromosome*values
        #print(chromosome,values,x)
        summation = np.sum(x)
        fitness_summation.append(summation)
    for a in range(len(fitness_summation)):
        if fitness_summation==0:
            fitness_result=[0 for a in range(len(summation))]
            fitness_result[a]=1.0
            return fitness_result
        else:
            x=1/np.absolute(fitness_summation[a])
            fitness_result.append(x)
    #print(np.sum(chromosome))
    fitness_result=np.array(fitness_result)
    multiplier = 1/np.sum(fitness_result)
    for x in range(len(fitness_result)):
        fitness_result[x] *= multiplier
        if np.isinf(fitness_result[x]):
            fitness_result=[0 for a in range(len(summation))]
            fitness_result[x]=1.0
            return fitness_result
        if np.isinf(fitness_result[x]):
            fitness_result[x]=0
    print(fitness_result)
    return fitness_result

"""### Random Selection function

This built-in function might help to create the weighted random selection:

`numpy.random.choice(a, size, replace, p)` 

`p` are the weights of the individuals- value between 0 and 1; refers to the probability of each individual being selected.

`a` is the array

`size` how many samples to return

`replace = True`
"""

def select(population, fit):
    ''' take input:  population and fit
        fit contains fitness values of each of the individuals 
        in the population  
        
        return:  one individual randomly giving
        more weight to ones which have high fitness score'''
    #a = [0,1,2,3,4]
    a = [a for a in range(len(population))]
    #size = 1
    #p = [.31, .29, 0.26, 0.14]
    #print(fit)
    #print(population)
    selected = np.random.choice(a,len(population),True,fit)
    selected = [population[a] for a in selected]
    #print(selected)
    return selected

"""### Crossover function


**function** CROSSOVER $(x, y)$ **returns** an individual 

>**inputs**: $x, y$  which are the parent individuals

>$n \leftarrow \mathrm{LENGTH}(x) ; c \leftarrow$ random number from 1 to $n$ 

>**return** APPEND(SUBSTRING $(x, 1, c),$ SUBSTRING $(y, c+1, n))$
"""

def crossover(x, y):
    '''take input: 2 parents - x, y. 
        Generate a random crossover point. 
        Append first half of x with second 
        half of y to create the child
        
        returns: a child chromosome'''
    crossover_point = np.random.randint(2,len(x)-2)
    temp_1=np.concatenate((x[0:crossover_point],y[crossover_point:]))
    #temp_2=np.concatenate((y[0:crossover_point],x[crossover_point:]))
    
    
    return temp_1

"""###Mutation function"""

def mutate(child):
    '''take input: a child
        mutates a random 
        gene into another random gene
        
        returns: mutated child'''
    random_pos = np.random.randint(0,len(child))
    if child[random_pos]==1:
        child[random_pos]=0
    else:
        child[random_pos]=1

    return child

"""### Genetic Algorithm Function"""

def GA(population, values, mutation_threshold = 0.3):
    '''implement the pseudocode here by
        calling the necessary functions- Fitness, 
        Selection, Crossover and Mutation
        
        print: the max fitness value and the 
        chromosome that generated it which is ultimately 
        the solution board'''
    count=0
    while count<1000:
        new_population=[]
        fitness_calculated=fitness(population,values)
        for a in range(len(fitness_calculated)):
            if fitness_calculated[a] == 1:
                return population[a]
            

        random_selected=select(population,fitness_calculated)
        for a in range(0,len(random_selected),2):
            if a<len(random_selected)-1:
                child = crossover(random_selected[a],random_selected[a+1])
            else:
                child = random_selected[a]
            if np.random.normal()<mutation_threshold:
                child = mutate(child)
            new_population.append(child)
        population=new_population
        count+=1

    #z=crossover(y[0],y[1])
    #print(y[0],y[1])
    #print(z)



    return -1

"""Running the Genetic Algorithm function"""

file_1=open("input_1.txt","r")
count=int(file_1.readline().rstrip())
values=[]
for a in range(count):
    x=file_1.readline().rstrip()
    x=x.split()
    y=int(x[1])
    if x[0]=="l":
        y*=-1
    values.append(y)

#print(values)

'''for 8 queen problem, n = 8'''
n = len(values)

'''start_population denotes how many individuals/chromosomes are there
  in the initial population n = 8'''
start_population = 10 

'''if you want you can set mutation_threshold to a higher value,
   to increase the chances of mutation'''
mutation_threshold = 0.3

'''creating the population with random integers between 0 to 7 inclusive
   for n = 8 queen problem'''
population = np.random.randint(0, 2, (start_population, n))

#print(population)
'''calling the GA function'''
answer = GA(population, values, mutation_threshold)
print("".join(str(a) for a in list(answer)))